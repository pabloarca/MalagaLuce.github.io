'use strict;'
if (!mapboxgl.supported()) {
    alert('Your browser does not support Mapbox GL. This app supports Safari 9 and above, Microsoft Edge 13 and above, along with the latest version of Chrome and Firefox')
} else {
    mapboxgl.accessToken = 'pk.eyJ1IjoiY2FydG9tZXRyaWNzIiwiYSI6ImNqOGJ2ZXIzazAxd3kyd3AyMDVrOGpzNWkifQ.KwvwFfoDOeLnjR1gEHO8tg';
    const filterGroup = document.getElementById('filter-group'),
        time_slider = document.getElementById('time-slider'),
        time_label = document.getElementById('time-label'),
        overlay = document.getElementById('overlay'),
        time_steps = [Infinity, 90, 30, 7, 1],
        center_point = [-4.421482086181641, 36.72120508210904],
        bounds = [
            [-4.514179229736328, 36.67667990169817],
            [-4.3526458740234375, 36.75043865214185]
        ],
        url = 'data.min.geojson',
        map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/cartometrics/cjekc96lz0tbe2rozmrhms79y',
            center: center_point,
            maxBounds: bounds,
            zoom: 10,
            maxzoom: 18,
            minzoom: 10
        }),
        navigation = new mapboxgl.NavigationControl();
    geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        country: 'es',
        bbox: bounds.reduce((accumulator, currentValue) => accumulator.concat(currentValue), [])
    });

    function changeMenu(x) {
        x.classList.toggle("change");
        overlay.classList.toggle("overlay")
    }
    map.addControl(navigation);
    map.addControl(geocoder, 'top-left');
    moment.locale('es');
    map.on('load', function() {
        let teams = [];
        let teams_cache = new Set();
        time_slider.setAttribute('max', parseInt(time_steps.length - 1))
        map.fitBounds(bounds);
        d3.json(url, (err, data) => {
            if (err) throw err;
            map.addSource('poa', {
                type: 'geojson',
                buffer: 32,
                data: data
            });
            map.addLayer({
                'id': 'action-points',
                'type': 'circle',
                'source': 'poa',
                'minzoom': 14,
                'filter': ['all'],
                'paint': {
                    'circle-radius': ['interpolate', ['exponential', 2],
                        ['zoom'], 14, 3.5, 22, 840
                    ],
                    'circle-blur': 0.1,
                    'circle-color': ['to-color', ['get', 'color', ['at', 0, ['get', 'teams', ['at', 0, ['get', 'volunteers']]]]]],
                    'circle-opacity': ['interpolate', ['linear'],
                        ['zoom'], 14, 0, 15, 1
                    ]
                }
            }, 'waterway-label');
            data.features.map(feature => {
                feature.properties.volunteers.forEach(volunteer => {
                    volunteer.teams.forEach(team => {
                        (teams_cache.has(team.name) ? '' : teams.push(team));
                        teams_cache.add(team.name)
                    })
                })
            });
            teams.forEach(team => {
                map.addLayer({
                    'id': team.name + '-heat',
                    'type': 'heatmap',
                    'source': 'poa',
                    'filter': ['all', ['==', team.name, ['get', 'name', ['at', 0, ['get', 'teams', ['at', 0, ['get', 'volunteers']]]]]]],
                    'maxzoom': 15,
                    'paint': {
                        'heatmap-weight': 1,
                        'heatmap-intensity': ['interpolate', ['linear'],
                            ['zoom'], 0, 1, 13, 3
                        ],
                        'heatmap-color': ['interpolate', ['linear'],
                            ['heatmap-density'], 0, 'rgba(33,102,172,0)', 0.2, 'rgba(103,169,207,0.25)', 0.4, 'rgba(209,229,240,0.25)', 0.6, 'rgba(253,219,199,0.25)', 0.8, 'rgba(239,138,98,0.25)', 1, team.color
                        ],
                        'heatmap-radius': ['interpolate', ['exponential', 2],
                            ['zoom'], 12, 14, 14, 47
                        ],
                        'heatmap-opacity': ['interpolate', ['linear'],
                            ['zoom'], 14, 1, 15, 0
                        ],
                    }
                }, 'waterway-label');
                let node = document.createElement('li');
                let input = document.createElement('input');
                input.type = 'checkbox';
                input.id = team.name;
                input.checked = !0;
                node.appendChild(input);
                let label = document.createElement('label');
                let team_color = document.createElement('span');
                team_color.setAttribute('class', 'team_color')
                team_color.style.backgroundColor = team.color;
                label.setAttribute('for', team.name);
                label.textContent = team.name;
                label.appendChild(team_color);
                node.appendChild(label);
                filterGroup.appendChild(node);
                input.addEventListener('change', function(e) {
                    let layer_filter = map.getFilter('action-points'),
                        heat_filter = map.getFilter(e.target.id + '-heat');
                    if (e.target.checked) {
                        map.setFilter('action-points', layer_filter.filter(filter => filter.includes(e.target.id) == !1));
                        map.setFilter(e.target.id + '-heat', heat_filter.filter(filter => filter.includes('!') == !1))
                    } else {
                        layer_filter.push(['!=', e.target.id, ['get', 'name', ['at', 0, ['get', 'teams', ['at', 0, ['get', 'volunteers']]]]]]);
                        heat_filter.push(['!', !0])
                        map.setFilter('action-points', layer_filter);
                        map.setFilter(e.target.id + '-heat', heat_filter)
                    }
                });
                time_slider.addEventListener('input', e => {
                    let layer_filter = map.getFilter('action-points').filter(filter => filter.includes('>=') == !1);
                    if (time_steps[e.target.value] < Infinity) {
                        let date_point = moment().subtract(time_steps[e.target.value], 'days').toArray().slice(0, 3);
                        layer_filter.push(['>=', ['to-number', ['at', 0, ['get', 'finishedDate']]], date_point[0]]);
                        layer_filter.push(['>=', ['to-number', ['at', 1, ['get', 'finishedDate']]], date_point[1] + 1]);
                        layer_filter.push(['>=', ['to-number', ['at', 2, ['get', 'finishedDate']]], date_point[2]]);
                        map.setFilter('action-points', layer_filter);
                        time_label.textContent = 'Realizadas ' + moment(moment().subtract(time_steps[e.target.value], 'days')).fromNow();
                        teams.forEach(team => {
                            let layer_filter_heatmap = map.getFilter(team.name + '-heat').filter(filter => filter.includes('>=') == !1);
                            layer_filter_heatmap.push(['>=', ['to-number', ['at', 0, ['get', 'finishedDate']]], date_point[0]]);
                            layer_filter_heatmap.push(['>=', ['to-number', ['at', 1, ['get', 'finishedDate']]], date_point[1] + 1]);
                            layer_filter_heatmap.push(['>=', ['to-number', ['at', 2, ['get', 'finishedDate']]], date_point[2]]);
                            map.setFilter(team.name + '-heat', layer_filter_heatmap)
                        })
                    } else {
                        map.setFilter('action-points', layer_filter);
                        teams.forEach(team => {
                            let layer_filter_heatmap = map.getFilter(team.name + '-heat').filter(filter => filter.includes('>=') == !1);
                            map.setFilter(team.name + '-heat', layer_filter_heatmap)
                        });
                        time_label.textContent = 'Todas las acciones'
                    }
                })
            })
        });
        map.on('click', 'action-points', e => {
            let properties = e.features[0].properties,
                geometry = e.features[0].geometry,
                first_team = properties.volunteers.split('}]')[0],
                owner_team = teams.filter(team => first_team.includes(team.name))[0],
                volunteers_group = properties.volunteers.replace(/,+"teams":\[{["A-Za-z:\d,#/\.}\s]*\]/g, '').split(',').filter(volunteer => volunteer.includes('name')).map(volunteer => volunteer.split(':')[1].slice(1, -1));
            console.log(properties.volunteers)
            html = `
            <img class="popup__emblem" src="${owner_team['emblem']}">
            <h3 class="popup__title ">${owner_team['name']}</h3>
            <div class="popup__images">
            ${properties['creationPic'] ? '<a href=' + properties['creationPic'] + ' target="_blank"><figure><img class="popup__pic" src=' + properties['creationPic'] + '><figcaption centered>Antes</figcaption></figure></a>' : ''}
            ${properties['finishedPic'] ? '<a href=' + properties['finishedPic'] + ' target="_blank"><figure><img class="popup__pic" src=' + properties['finishedPic'] + '><figcaption>Despu√©s</figcaption></figure></a>' : ''}
            </div>
            <h3 class="popup__title">Realizado ${moment(properties['finishedDate'].slice(1,-1).replace(/"/g,'').split(',').join('-')).from(moment())}</h3>
            <h3 class="user" style="color:#27292b"> Participantes:</h3>
            <ul class="popup__list">${volunteers_group.map(volunteer => '<li class="popup__list-element">' + volunteer + '</li>').join('')}<ul>`;
            map.flyTo({
                center: geometry['coordinates'],
                speed: 0.4,
                zoom: 15,
                curve: 1
            });
            new mapboxgl.Popup().setLngLat(geometry['coordinates']).setHTML(html).addTo(map)
        });
        map.on('mouseenter', 'action-points', () => {
            map.getCanvas().style.cursor = 'pointer'
        });
        map.on('mouseleave', 'action-points', () => {
            map.getCanvas().style.cursor = ''
        })
    })
}
